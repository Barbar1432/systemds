m_img_mirror_linearized = function(matrix[double] img_matrix, Boolean horizontal_axis,Integer original_rows ,Integer original_cols) return (matrix[double] R){
  n =  ncol(img_matrix);
  R = matrix(0, rows=nrow(img_matrix), cols=n); #initialize the output_matrix
  rows =original_rows
  cols= original_cols

  
  if (horizontal_axis) {

   for (i in seq(1,(rows%/% 2)*cols,cols)){
    start =i
    end= i+cols-1
    mirrorStart = (n - end) + 1;
    mirrorEnd = (n - start) + 1;
    R[, start:end] = img_matrix[, mirrorStart:mirrorEnd];
    R[, mirrorStart:mirrorEnd] = img_matrix[, start:end];
    
   }
   if(rows %% 2 == 1) { 
      midStart = ((rows%/% 2))*cols + 1;
      midEnd = midStart + cols - 1;
      R[, midStart:midEnd] = img_matrix[, midStart:midEnd];
    }
  }
  else {

   for(i in 1:nrow(img_matrix)) {
      offset = 1;
      while(offset <= n) {
        # Get the sub-matrix 
        end = min(n, offset + cols - 1);
        # Reverse the sub-matrix columns
        reversed_sub_matrix = matrix(0, rows=1, cols=cols);
        idx = 1;
        for (j in offset:end) {
          reversed_sub_matrix[1, cols - idx + 1] = img_matrix[i, j];
          idx = idx + 1;
        }
        R[i, offset:end] = reversed_sub_matrix;
        offset = end + 1;
      }  
  }
}
}


